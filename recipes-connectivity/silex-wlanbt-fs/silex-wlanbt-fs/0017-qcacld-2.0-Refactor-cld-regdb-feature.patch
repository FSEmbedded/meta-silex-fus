From ef418c9d3923a864cfe9d205aacef3a4f60f4498 Mon Sep 17 00:00:00 2001
Message-Id: <ef418c9d3923a864cfe9d205aacef3a4f60f4498.1731000715.git.keller@fs-net.de>
In-Reply-To: <4d28209436179e313629def5ee868419f73d6121.1731000715.git.keller@fs-net.de>
References: <4d28209436179e313629def5ee868419f73d6121.1731000715.git.keller@fs-net.de>
From: Li Feng <quic_lifeng@quicinc.com>
Date: Wed, 17 Nov 2021 20:41:06 +0800
Subject: [PATCH 2/4] qcacld-2.0: Refactor cld regdb feature

Refactor cld regdb feature which enable to manage regulatory by
itself when built-in regdb is not supported in the kernel.

Change-Id: Ie1381a67ca86acd30bcf4628800fbbe69419b2d6
CRs-Fixed: 3077236
---
 CORE/HDD/src/wlan_hdd_main.c |  17 +++-
 CORE/HDD/src/wlan_hdd_wext.c |  36 ++++++++-
 CORE/VOSS/inc/regdb.h        |  25 ++++++
 CORE/VOSS/src/vos_nvitem.c   | 181 ++++++++++++++++++++++++++++++++++++++++++-
 Kbuild                       |   7 ++
 5 files changed, 263 insertions(+), 3 deletions(-)

diff --git a/CORE/HDD/src/wlan_hdd_main.c b/CORE/HDD/src/wlan_hdd_main.c
index 0e35d1e..fd1cb23 100644
--- a/CORE/HDD/src/wlan_hdd_main.c
+++ b/CORE/HDD/src/wlan_hdd_main.c
@@ -1,5 +1,6 @@
 /*
- * Copyright (c) 2012-2019 The Linux Foundation. All rights reserved.
+ * Copyright (c) 2012-2019, 2021 The Linux Foundation. All rights reserved.
+ * Copyright (c) 2021 Qualcomm Innovation Center, Inc. All rights reserved.
  *
  * Previously licensed under the ISC license by Qualcomm Atheros, Inc.
  *
@@ -17372,6 +17373,11 @@ int hdd_wlan_startup(struct device *dev, v_VOID_t *hif_sc)
          goto err_vosclose;
       }
 
+#ifdef CLD_REGDB
+     if (wiphy && country_code)
+         regulatory_hint(wiphy, country_code);
+#endif
+
       status = wlan_hdd_reg_init(pHddCtx);
       if (status != VOS_STATUS_SUCCESS) {
          hddLog(VOS_TRACE_LEVEL_FATAL,
@@ -17442,6 +17448,15 @@ int hdd_wlan_startup(struct device *dev, v_VOID_t *hif_sc)
               __func__, pHddCtx->cfg_ini->arp_ac_category, ret);
    }
 
+#ifdef CLD_REGDB
+   if (country_code) {
+      pHddCtx->reg.alpha2[0] = country_code[0];
+      pHddCtx->reg.alpha2[1] = country_code[1];
+      pHddCtx->reg.cc_src = NL80211_REGDOM_SET_BY_DRIVER;
+      pHddCtx->reg.dfs_region = 0;
+   }
+#endif
+
    status = hdd_set_sme_chan_list(pHddCtx);
    if (status != VOS_STATUS_SUCCESS) {
       hddLog(VOS_TRACE_LEVEL_FATAL,
diff --git a/CORE/HDD/src/wlan_hdd_wext.c b/CORE/HDD/src/wlan_hdd_wext.c
index 2b27987..9d84f06 100644
--- a/CORE/HDD/src/wlan_hdd_wext.c
+++ b/CORE/HDD/src/wlan_hdd_wext.c
@@ -1,5 +1,6 @@
 /*
- * Copyright (c) 2011-2019 The Linux Foundation. All rights reserved.
+ * Copyright (c) 2011-2020, 2021 The Linux Foundation. All rights reserved.
+ * Copyright (c) 2021 Qualcomm Innovation Center, Inc. All rights reserved.
  *
  * Previously licensed under the ISC license by Qualcomm Atheros, Inc.
  *
@@ -903,6 +904,36 @@ void hdd_wlan_dump_stats(hdd_adapter_t *pAdapter, int value)
     }
 }
 
+#ifdef CLD_REGDB
+void hdd_wlan_dump_cld_regdb(hdd_adapter_t *adapter)
+{
+	hdd_context_t *hdd_ctx;
+	struct wiphy *wiphy;
+	uint32_t i;
+	uint32_t j;
+	struct ieee80211_supported_band *band;
+
+	hdd_ctx = WLAN_HDD_GET_CTX(adapter);
+
+	wiphy = hdd_ctx->wiphy;
+	for (i = 0; i < IEEE80211_NUM_BANDS; i++) {
+		band = wiphy->bands[i];
+		if (!band)
+			continue;
+
+		for (j = 0; j < band->n_channels; j++)
+			pr_info("[CLD-REGDB-DEBUG]: freq %d flags 0x%x\n",
+				band->channels[j].center_freq,
+				band->channels[j].flags);
+	}
+}
+#else
+void hdd_wlan_dump_cld_regdb(hdd_adapter_t *adapter)
+{
+
+}
+#endif
+
 /**---------------------------------------------------------------------------
 
   \brief hdd_wlan_get_version() -
@@ -973,6 +1004,9 @@ void hdd_wlan_get_version(hdd_adapter_t *pAdapter, union iwreq_data *wrqu,
                 CRMId,
                 pHWversion);
     }
+
+    hdd_wlan_dump_cld_regdb(pAdapter);
+
 error:
     return;
 }
diff --git a/CORE/VOSS/inc/regdb.h b/CORE/VOSS/inc/regdb.h
new file mode 100644
index 0000000..e957487
--- /dev/null
+++ b/CORE/VOSS/inc/regdb.h
@@ -0,0 +1,25 @@
+ /*
+  * Copyright (c) 2021 Qualcomm Innovation Center, Inc. All rights reserved.
+  *
+  * Permission to use, copy, modify, and/or distribute this software for
+  * any purpose with or without fee is hereby granted, provided that the
+  * above copyright notice and this permission notice appear in all
+  * copies.
+  *
+  * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
+  * WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
+  * WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
+  * AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
+  * DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
+  * PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
+  * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
+  * PERFORMANCE OF THIS SOFTWARE.
+  */
+
+#ifndef __REGDB_H__
+#define __REGDB_H__
+
+extern const struct ieee80211_regdomain *reg_regdb[];
+extern int reg_regdb_size;
+
+#endif
diff --git a/CORE/VOSS/src/vos_nvitem.c b/CORE/VOSS/src/vos_nvitem.c
index 952fb78..e0f56c1 100644
--- a/CORE/VOSS/src/vos_nvitem.c
+++ b/CORE/VOSS/src/vos_nvitem.c
@@ -1,5 +1,6 @@
 /*
- * Copyright (c) 2012-2018 The Linux Foundation. All rights reserved.
+ * Copyright (c) 2012-2019, 2021 The Linux Foundation. All rights reserved.
+ * Copyright (c) 2021 Qualcomm Innovation Center, Inc. All rights reserved.
  *
  * Previously licensed under the ISC license by Qualcomm Atheros, Inc.
  *
@@ -53,6 +54,10 @@
 #include "regdomain.h"
 #include "regdomain_common.h"
 #include "vos_cnss.h"
+#ifdef CLD_REGDB
+#include "regdb.h"
+#include <net/regulatory.h>
+#endif
 
 #if (LINUX_VERSION_CODE < KERNEL_VERSION(3,9,0)) && !defined(WITH_BACKPORTS)
 #define IEEE80211_CHAN_NO_80MHZ		1<<7
@@ -746,7 +751,9 @@ static int regd_init_wiphy(hdd_context_t *pHddCtx, struct regulatory *reg,
 	wiphy->flags |= WIPHY_FLAG_CUSTOM_REGULATORY;
 #endif
 
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(4, 4, 0))
 	wiphy_apply_custom_regulatory(wiphy, regd);
+#endif
 
 	/*
 	 * restore the driver regulatory flags since
@@ -759,6 +766,11 @@ static int regd_init_wiphy(hdd_context_t *pHddCtx, struct regulatory *reg,
 	wiphy->flags = pHddCtx->reg.reg_flags;
 #endif
 
+#ifdef CLD_REGDB
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,14,0)) || defined(WITH_BACKPORTS)
+	wiphy->regulatory_flags = REGULATORY_WIPHY_SELF_MANAGED;
+#endif
+#endif
 	return 0;
 }
 
@@ -1573,7 +1585,12 @@ VOS_STATUS vos_nv_getRegDomainFromCountryCode( v_REGDOMAIN_t *pRegDomain,
     hdd_context_t *pHddCtx = NULL;
     struct wiphy *wiphy = NULL;
     int i;
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(5, 4, 0)) || !defined(CLD_REGDB)
     int wait_result;
+#endif
+#ifdef CLD_REGDB
+    struct regulatory_request request;
+#endif
 
     /* sanity checks */
     if (NULL == pRegDomain)
@@ -1672,10 +1689,19 @@ VOS_STATUS vos_nv_getRegDomainFromCountryCode( v_REGDOMAIN_t *pRegDomain,
         init_by_driver = VOS_TRUE;
 
         if (('0' != country_code[0]) || ('0' != country_code[1])) {
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(5, 4, 0)) || !defined(CLD_REGDB)
             INIT_COMPLETION(pHddCtx->reg_init);
             regulatory_hint(wiphy, country_code);
             wait_for_completion_timeout(&pHddCtx->reg_init,
                                         msecs_to_jiffies(REG_WAIT_TIME));
+#endif
+#ifdef CLD_REGDB
+	    request.alpha2[0] = pHddCtx->reg.alpha2[0];
+	    request.alpha2[1] = pHddCtx->reg.alpha2[1];
+	    request.initiator = NL80211_REGDOM_SET_BY_DRIVER;
+	    request.dfs_region = 0;
+	    wiphy->reg_notifier(wiphy, &request);
+#endif
         }
 
     } else if (COUNTRY_IE == source || COUNTRY_USER == source) {
@@ -1684,6 +1710,7 @@ VOS_STATUS vos_nv_getRegDomainFromCountryCode( v_REGDOMAIN_t *pRegDomain,
         else
             vos_set_cc_source(CNSS_SOURCE_11D);
 
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(5, 4, 0)) || !defined(CLD_REGDB)
         INIT_COMPLETION(pHddCtx->reg_init);
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,9,0)) || defined(WITH_BACKPORTS)
         regulatory_hint_user(country_code, NL80211_USER_REG_HINT_USER);
@@ -1714,6 +1741,7 @@ VOS_STATUS vos_nv_getRegDomainFromCountryCode( v_REGDOMAIN_t *pRegDomain,
 
             return VOS_STATUS_E_EXISTS;
         }
+#endif
     }
 
     *pRegDomain = temp_reg_domain;
@@ -1925,6 +1953,116 @@ int vos_update_band(v_U8_t  band_capability)
 	return 0;
 }
 
+#ifdef CLD_REGDB
+static const struct ieee80211_regdomain *
+vos_search_regd(const char* alpha2)
+{
+	const struct ieee80211_regdomain *regdomain;
+	uint32_t i;
+
+	for (i = 0; i < reg_regdb_size; i++) {
+		regdomain = reg_regdb[i];
+		if (vos_mem_compare(alpha2,
+				    regdomain->alpha2,
+				    2))
+			return regdomain;
+	}
+
+	return NULL;
+}
+
+#define VOS_ONE_GHZ_IN_KHZ 1000000
+static bool
+vos_freq_in_rule_band(const struct ieee80211_freq_range *freq_range,
+		      uint32_t freq)
+{
+	uint32_t limit;
+
+	limit = freq > 45 * VOS_ONE_GHZ_IN_KHZ ?
+			20 * VOS_ONE_GHZ_IN_KHZ :
+			2 * VOS_ONE_GHZ_IN_KHZ;
+
+	if ((abs(freq - freq_range->start_freq_khz) <= limit) ||
+	    (abs(freq - freq_range->end_freq_khz) <= limit))
+		return true;
+
+	return false;
+}
+
+static bool
+vos_reg_does_bw_fit(const struct ieee80211_freq_range *freq_range,
+		    uint32_t center_freq,
+		    uint32_t bw)
+{
+	uint32_t freq_start;
+	uint32_t freq_end;
+
+	freq_start = center_freq - (bw / 2);
+	freq_end = center_freq + (bw / 2);
+
+	if ((freq_start >= freq_range->start_freq_khz) &&
+	    (freq_end <= freq_range->end_freq_khz))
+		return true;
+
+	return false;
+}
+
+static const struct ieee80211_reg_rule *
+vos_freq_reg_info(struct wiphy *wiphy,
+                  uint32_t center_freq,
+                  const struct ieee80211_regdomain *regd)
+{
+	uint32_t i;
+	const struct ieee80211_reg_rule *reg_rule;
+	const struct ieee80211_freq_range *freq_range;
+	bool freq_in_band;
+	bool bw_fit;
+
+	if (!regd)
+		return NULL;
+
+	for (i = 0; i < regd->n_reg_rules; i++) {
+		reg_rule = &regd->reg_rules[i];
+		freq_range = &reg_rule->freq_range;
+
+		freq_in_band = vos_freq_in_rule_band(freq_range,
+						     center_freq);
+		bw_fit = vos_reg_does_bw_fit(freq_range,
+					     center_freq,
+					     MHZ_TO_KHZ(20));
+
+		if (freq_in_band && bw_fit)
+			return reg_rule;
+	}
+
+	return ERR_PTR(-EINVAL);
+}
+
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5, 4, 0))
+static struct ieee80211_regdomain *
+vos_copy_regd(const struct ieee80211_regdomain *regd)
+{
+	struct ieee80211_regdomain *regd_dup;
+	uint32_t regd_dup_size;
+	uint32_t i;
+
+	regd_dup_size = sizeof(struct ieee80211_regdomain) +
+			regd->n_reg_rules * sizeof(struct ieee80211_reg_rule);
+	regd_dup = vos_mem_malloc(regd_dup_size);
+	if (!regd_dup)
+		return ERR_PTR(-ENOMEM);
+	vos_mem_zero(regd_dup, regd_dup_size);
+
+	vos_mem_copy(regd_dup, regd, sizeof(struct ieee80211_regdomain));
+	for (i = 0; i < regd->n_reg_rules; i++)
+		vos_mem_copy(&regd_dup->reg_rules[i],
+			     &regd->reg_rules[i],
+			     sizeof(struct ieee80211_reg_rule));
+
+	return regd_dup;
+}
+#endif
+#endif
 /* create_linux_regulatory_entry to populate internal structures from wiphy */
 static int create_linux_regulatory_entry(struct wiphy *wiphy,
                                          v_U8_t nBandCapability,
@@ -1938,6 +2076,14 @@ static int create_linux_regulatory_entry(struct wiphy *wiphy,
 	 int err;
 #endif
     const struct ieee80211_reg_rule *reg_rule;
+#ifdef CLD_REGDB
+    const struct ieee80211_regdomain *regd;
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5, 4, 0)) && defined(CLD_REGDB)
+    struct ieee80211_regdomain *regd_dup;
+    bool rtnl_locked = false;
+    int ret;
+#endif
+#endif
     pVosContext = vos_get_global_context(VOS_MODULE_ID_SYS, NULL);
 
     if (NULL != pVosContext)
@@ -1975,6 +2121,30 @@ static int create_linux_regulatory_entry(struct wiphy *wiphy,
     vos_mem_zero(pnvEFSTable->halnv.tables.regDomains[temp_reg_domain].channels,
 		 NUM_RF_CHANNELS * sizeof(sRegulatoryChannel));
 
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5, 4, 0)) && defined(CLD_REGDB)
+    wiphy->regulatory_flags = REGULATORY_WIPHY_SELF_MANAGED;
+    regd = vos_search_regd(pHddCtx->reg.alpha2);
+    if (!regd) {
+        VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,
+                  "unknown alpha2 %c%c",
+                  pHddCtx->reg.alpha2[0], pHddCtx->reg.alpha2[1]);
+        return -1;
+    }
+
+    regd_dup = vos_copy_regd(regd);
+    if (!rtnl_is_locked()) {
+        rtnl_lock();
+        rtnl_locked = true;
+    }
+    ret = regulatory_set_wiphy_regd_sync_rtnl(wiphy, regd_dup);
+    if (ret)
+        VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,
+                  "regulatory set wiphy regd err:%d", ret);
+    if (rtnl_locked)
+        rtnl_unlock();
+    vos_mem_free(regd_dup);
+#endif
+
     for (i = 0, m = 0; i<IEEE80211_NUM_BANDS; i++)
     {
         if (wiphy->bands[i] == NULL)
@@ -2009,8 +2179,17 @@ static int create_linux_regulatory_entry(struct wiphy *wiphy,
 #endif
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,9,0)) || defined(WITH_BACKPORTS)
+#ifdef CLD_REGDB
+                wiphy->bands[i]->channels[j].flags |= IEEE80211_CHAN_DISABLED;
+                regd = vos_search_regd(pHddCtx->reg.alpha2);
+                reg_rule = vos_freq_reg_info(wiphy,
+                                             MHZ_TO_KHZ(wiphy->bands[i]->
+                                             channels[j].center_freq),
+                                             regd);
+#else
                 reg_rule = freq_reg_info(wiphy, MHZ_TO_KHZ(wiphy->bands[i]->
                                          channels[j].center_freq));
+#endif
 #else
                 err = freq_reg_info(wiphy, MHZ_TO_KHZ(wiphy->bands[i]->
                                     channels[j].center_freq),
diff --git a/Kbuild b/Kbuild
index b1ebf38..de36730 100644
--- a/Kbuild
+++ b/Kbuild
@@ -802,6 +802,9 @@ ifeq ($(BUILD_DIAG_VERSION),1)
 VOSS_OBJS += $(VOSS_SRC_DIR)/vos_diag.o
 endif
 
+ifeq ($(CONFIG_CLD_REGDB),y)
+VOSS_OBJS += $(VOSS_SRC_DIR)/vos_regdb.o
+endif
 ########### BMI ###########
 BMI_DIR := CORE/SERVICES/BMI
 
@@ -1881,6 +1884,10 @@ ifdef WLAN_HDD_ADAPTER_MAGIC
 CDEFINES += -DWLAN_HDD_ADAPTER_MAGIC=$(WLAN_HDD_ADAPTER_MAGIC)
 endif
 
+ifeq ($(CONFIG_CLD_REGDB), y)
+CDEFINES += -DCLD_REGDB
+endif
+
 # Module information used by KBuild framework
 ifeq ($(CONFIG_FEATURE_LARGE_PREALLOC),y)
 obj-$(CONFIG_QCA_CLD_WLAN) += wlan_prealloc.o
-- 
2.14.5

