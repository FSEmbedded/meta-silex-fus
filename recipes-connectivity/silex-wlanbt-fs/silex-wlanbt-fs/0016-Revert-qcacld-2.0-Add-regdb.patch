From 4d28209436179e313629def5ee868419f73d6121 Mon Sep 17 00:00:00 2001
Message-Id: <4d28209436179e313629def5ee868419f73d6121.1731000715.git.keller@fs-net.de>
From: Li Feng <lifeng@codeaurora.org>
Date: Tue, 19 Oct 2021 09:53:23 +0800
Subject: [PATCH 1/4] Revert "qcacld-2.0: Add regdb"

This reverts commit "ed506a689b9b9afc10cd477d741312da0b5ecbe3"
to re-implement the cld regdb feature with proper way.

Change-Id: Id920acc34c3dbd54ed30111f0f9d140dc451d258
---
 CORE/HDD/src/wlan_hdd_main.c |  16 -----
 CORE/HDD/src/wlan_hdd_wext.c |  19 ------
 CORE/VOSS/inc/regdb.h        |  30 ---------
 CORE/VOSS/src/vos_nvitem.c   | 143 +------------------------------------------
 Kbuild                       |   8 ---
 5 files changed, 2 insertions(+), 214 deletions(-)

diff --git a/CORE/HDD/src/wlan_hdd_main.c b/CORE/HDD/src/wlan_hdd_main.c
index 14e042a..0e35d1e 100644
--- a/CORE/HDD/src/wlan_hdd_main.c
+++ b/CORE/HDD/src/wlan_hdd_main.c
@@ -17372,12 +17372,6 @@ int hdd_wlan_startup(struct device *dev, v_VOID_t *hif_sc)
          goto err_vosclose;
       }
 
-#ifdef CLD_REGDB
-      if ((wiphy) && country_code) {
-          regulatory_hint(wiphy, country_code);
-      }
-#endif
-
       status = wlan_hdd_reg_init(pHddCtx);
       if (status != VOS_STATUS_SUCCESS) {
          hddLog(VOS_TRACE_LEVEL_FATAL,
@@ -17448,16 +17442,6 @@ int hdd_wlan_startup(struct device *dev, v_VOID_t *hif_sc)
               __func__, pHddCtx->cfg_ini->arp_ac_category, ret);
    }
 
-#ifdef CLD_REGDB
-   if (country_code)
-   {
-       pHddCtx->reg.alpha2[0] = country_code[0];
-       pHddCtx->reg.alpha2[1] = country_code[1];
-       pHddCtx->reg.cc_src = NL80211_REGDOM_SET_BY_DRIVER;
-       pHddCtx->reg.dfs_region = 0;
-   }
-#endif
-
    status = hdd_set_sme_chan_list(pHddCtx);
    if (status != VOS_STATUS_SUCCESS) {
       hddLog(VOS_TRACE_LEVEL_FATAL,
diff --git a/CORE/HDD/src/wlan_hdd_wext.c b/CORE/HDD/src/wlan_hdd_wext.c
index 32a6b93..2b27987 100644
--- a/CORE/HDD/src/wlan_hdd_wext.c
+++ b/CORE/HDD/src/wlan_hdd_wext.c
@@ -926,10 +926,6 @@ void hdd_wlan_get_version(hdd_adapter_t *pAdapter, union iwreq_data *wrqu,
 
     hdd_context_t *pHddContext;
     int i = 0;
-#ifdef CLD_REGDB
-    struct wiphy *wiphy = NULL;
-    int j;
-#endif
 
     pHddContext = WLAN_HDD_GET_CTX(pAdapter);
     if (!pHddContext) {
@@ -977,21 +973,6 @@ void hdd_wlan_get_version(hdd_adapter_t *pAdapter, union iwreq_data *wrqu,
                 CRMId,
                 pHWversion);
     }
-
-#ifdef CLD_REGDB
-    wiphy = pHddContext->wiphy;
-    for (i = 0; i < IEEE80211_NUM_BANDS; i++) {
-        if (NULL == wiphy->bands[i])
-            continue;
-
-        for (j = 0; j < wiphy->bands[i]->n_channels; j++) {
-            struct ieee80211_supported_band *band = wiphy->bands[i];
-            printk("[CLD-REGDB-DEBUG]: channel %d flags 0x%x\n",
-                   band->channels[j].center_freq, band->channels[j].flags);
-        }
-    }
-#endif
-
 error:
     return;
 }
diff --git a/CORE/VOSS/inc/regdb.h b/CORE/VOSS/inc/regdb.h
deleted file mode 100644
index ae8e057..0000000
--- a/CORE/VOSS/inc/regdb.h
+++ /dev/null
@@ -1,30 +0,0 @@
-/*
- * Copyright (c) 2019 The Linux Foundation. All rights reserved.
- *
- * Permission to use, copy, modify, and/or distribute this software for
- * any purpose with or without fee is hereby granted, provided that the
- * above copyright notice and this permission notice appear in all
- * copies.
- *
- * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
- * WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
- * AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
- * DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
- * PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
- * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
- * PERFORMANCE OF THIS SOFTWARE.
- */
-/** ------------------------------------------------------------------------- *
-    ------------------------------------------------------------------------- *
-    \file regdb.h
-
-    for REGDB.
-========================================================================== */
-#ifndef __REGDB_H__
-#define __REGDB_H__
-
-extern const struct ieee80211_regdomain *reg_regdb[];
-extern int reg_regdb_size;
-
-#endif /* __REGDB_H__ */
diff --git a/CORE/VOSS/src/vos_nvitem.c b/CORE/VOSS/src/vos_nvitem.c
index b22162d..952fb78 100644
--- a/CORE/VOSS/src/vos_nvitem.c
+++ b/CORE/VOSS/src/vos_nvitem.c
@@ -53,10 +53,6 @@
 #include "regdomain.h"
 #include "regdomain_common.h"
 #include "vos_cnss.h"
-#ifdef CLD_REGDB
-#include "regdb.h"
-#include <net/regulatory.h>
-#endif
 
 #if (LINUX_VERSION_CODE < KERNEL_VERSION(3,9,0)) && !defined(WITH_BACKPORTS)
 #define IEEE80211_CHAN_NO_80MHZ		1<<7
@@ -763,17 +759,6 @@ static int regd_init_wiphy(hdd_context_t *pHddCtx, struct regulatory *reg,
 	wiphy->flags = pHddCtx->reg.reg_flags;
 #endif
 
-#ifdef CLD_REGDB
-	/*
-	 * Set wiphy->regulatory_flags to REGULATORY_WIPHY_SELF_MANAGED
-	 * So kernel would not change wiphy channel flags.
-	 * Later wiphy->regulatory_flags would be changed by
-	 * __wlan_hdd_linux_reg_notifier.
-	 */
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,14,0)) || defined(WITH_BACKPORTS)
-	wiphy->regulatory_flags = REGULATORY_WIPHY_SELF_MANAGED;
-#endif
-#endif
 	return 0;
 }
 
@@ -1565,10 +1550,6 @@ VOS_STATUS vos_nv_get_dfs_region(uint8_t *dfs_region)
 	return VOS_STATUS_SUCCESS;
 }
 
-#ifdef CLD_REGDB
-void __wlan_hdd_linux_reg_notifier(struct wiphy *wiphy,
-                                   struct regulatory_request *request);
-#endif
 /**------------------------------------------------------------------------
   \brief vos_nv_getRegDomainFromCountryCode() - get the regulatory domain of
   a country given its country code
@@ -1593,9 +1574,6 @@ VOS_STATUS vos_nv_getRegDomainFromCountryCode( v_REGDOMAIN_t *pRegDomain,
     struct wiphy *wiphy = NULL;
     int i;
     int wait_result;
-#ifdef CLD_REGDB
-    struct regulatory_request request;
-#endif
 
     /* sanity checks */
     if (NULL == pRegDomain)
@@ -1636,13 +1614,6 @@ VOS_STATUS vos_nv_getRegDomainFromCountryCode( v_REGDOMAIN_t *pRegDomain,
         return VOS_STATUS_E_FAULT;
     }
 
-#ifdef CLD_REGDB
-    request.alpha2[0] = pHddCtx->reg.alpha2[0];
-    request.alpha2[1] = pHddCtx->reg.alpha2[1];
-    request.initiator = NL80211_REGDOM_SET_BY_DRIVER;
-    request.dfs_region = 0;
-#endif
-
     if (pHddCtx->isLogpInProgress) {
         VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,
                    (" SSR in progress, return") );
@@ -1705,9 +1676,6 @@ VOS_STATUS vos_nv_getRegDomainFromCountryCode( v_REGDOMAIN_t *pRegDomain,
             regulatory_hint(wiphy, country_code);
             wait_for_completion_timeout(&pHddCtx->reg_init,
                                         msecs_to_jiffies(REG_WAIT_TIME));
-#ifdef CLD_REGDB
-            __wlan_hdd_linux_reg_notifier(wiphy, &request);
-#endif
         }
 
     } else if (COUNTRY_IE == source || COUNTRY_USER == source) {
@@ -1957,101 +1925,6 @@ int vos_update_band(v_U8_t  band_capability)
 	return 0;
 }
 
-#ifdef CLD_REGDB
-static bool freq_in_rule_band(const struct ieee80211_freq_range *freq_range,u32 freq_khz)
-{
-#define ONE_GHZ_IN_KHZ	1000000
-    /*
-     * From 802.11ad: directional multi-gigabit (DMG):
-     * Pertaining to operation in a frequency band containing a channel
-     * with the Channel starting frequency above 45 GHz.
-     */
-    u32 limit = freq_khz > 45 * ONE_GHZ_IN_KHZ ?
-        10 * ONE_GHZ_IN_KHZ : 2 * ONE_GHZ_IN_KHZ;
-    if (abs(freq_khz - freq_range->start_freq_khz) <= limit)
-        return true;
-    if (abs(freq_khz - freq_range->end_freq_khz) <= limit)
-        return true;
-    return false;
-#undef ONE_GHZ_IN_KHZ
-}
-
-static bool alpha2_equal(const char *alpha2_x, const char *alpha2_y)
-{
-    if (!alpha2_x || !alpha2_y)
-        return false;
-    return alpha2_x[0] == alpha2_y[0] && alpha2_x[1] == alpha2_y[1];
-}
-
-const struct ieee80211_regdomain* search_regd(const char* alpha2)
-{
-    const struct ieee80211_regdomain *curdom = NULL;
-    int i;
-
-    for (i = 0; i < reg_regdb_size; i++) {
-        curdom = reg_regdb[i];
-
-        if (alpha2_equal(alpha2, curdom->alpha2)) {
-            return curdom;
-        }
-    }
-    return NULL;
-}
-
-static bool reg_does_bw_fit(const struct ieee80211_freq_range *freq_range,
-                u32 center_freq_khz, u32 bw_khz)
-{
-    u32 start_freq_khz, end_freq_khz;
-
-    start_freq_khz = center_freq_khz - (bw_khz/2);
-    end_freq_khz = center_freq_khz + (bw_khz/2);
-
-    if (start_freq_khz >= freq_range->start_freq_khz &&
-            end_freq_khz <= freq_range->end_freq_khz)
-        return true;
-
-    return false;
-}
-
-static const struct ieee80211_reg_rule *
-freq_reg_info_regd(struct wiphy *wiphy, u32 center_freq,
-        const struct ieee80211_regdomain *regd)
-{
-    int i;
-    bool band_rule_found = false;
-    bool bw_fits = false;
-
-    if (!regd)
-        return ERR_PTR(-EINVAL);
-
-    for (i = 0; i < regd->n_reg_rules; i++) {
-        const struct ieee80211_reg_rule *rr;
-        const struct ieee80211_freq_range *fr = NULL;
-
-        rr = &regd->reg_rules[i];
-        fr = &rr->freq_range;
-
-        /*
-         * We only need to know if one frequency rule was
-         * was in center_freq's band, that's enough, so lets
-         * not overwrite it once found
-         */
-        if (!band_rule_found)
-            band_rule_found = freq_in_rule_band(fr, center_freq);
-
-        bw_fits = reg_does_bw_fit(fr, center_freq, MHZ_TO_KHZ(20));
-
-        if (band_rule_found && bw_fits)
-            return rr;
-    }
-
-    if (!band_rule_found)
-        return ERR_PTR(-ERANGE);
-
-    return ERR_PTR(-EINVAL);
-}
-#endif
-
 /* create_linux_regulatory_entry to populate internal structures from wiphy */
 static int create_linux_regulatory_entry(struct wiphy *wiphy,
                                          v_U8_t nBandCapability,
@@ -2065,9 +1938,6 @@ static int create_linux_regulatory_entry(struct wiphy *wiphy,
 	 int err;
 #endif
     const struct ieee80211_reg_rule *reg_rule;
-#ifdef CLD_REGDB
-    const struct ieee80211_regdomain* regd;
-#endif
     pVosContext = vos_get_global_context(VOS_MODULE_ID_SYS, NULL);
 
     if (NULL != pVosContext)
@@ -2139,22 +2009,13 @@ static int create_linux_regulatory_entry(struct wiphy *wiphy,
 #endif
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,9,0)) || defined(WITH_BACKPORTS)
-#ifdef CLD_REGDB
-                regd = search_regd(pHddCtx->reg.alpha2);
-                reg_rule = freq_reg_info_regd(wiphy,
-                           MHZ_TO_KHZ(wiphy->bands[i]->channels[j].center_freq), regd);
-#else
-                reg_rule = freq_reg_info(wiphy,
-                           MHZ_TO_KHZ(wiphy->bands[i]->channels[j].center_freq));
-#endif
+                reg_rule = freq_reg_info(wiphy, MHZ_TO_KHZ(wiphy->bands[i]->
+                                         channels[j].center_freq));
 #else
                 err = freq_reg_info(wiphy, MHZ_TO_KHZ(wiphy->bands[i]->
                                     channels[j].center_freq),
                                     0, &reg_rule);
 #endif
-#ifdef CLD_REGDB
-                wiphy->bands[i]->channels[j].flags |= IEEE80211_CHAN_DISABLED;
-#endif
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,9,0)) || defined(WITH_BACKPORTS)
                 if (!IS_ERR(reg_rule)) {
diff --git a/Kbuild b/Kbuild
index bfc5837..b1ebf38 100644
--- a/Kbuild
+++ b/Kbuild
@@ -798,10 +798,6 @@ VOSS_OBJS :=    $(VOSS_SRC_DIR)/vos_api.o \
 		$(VOSS_SRC_DIR)/vos_types.o \
                 $(VOSS_SRC_DIR)/vos_utils.o
 
-ifeq ($(CONFIG_CLD_REGDB),y)
-VOSS_OBJS += $(VOSS_SRC_DIR)/vos_regdb.o
-endif
-
 ifeq ($(BUILD_DIAG_VERSION),1)
 VOSS_OBJS += $(VOSS_SRC_DIR)/vos_diag.o
 endif
@@ -1128,10 +1124,6 @@ CDEFINES +=     -DWLAN_FEATURE_MBSSID \
 		-DWLAN_FEATURE_SAP_TO_FOLLOW_STA_CHAN
 endif
 
-ifeq ($(CONFIG_CLD_REGDB), y)
-CDEFINES +=     -DCLD_REGDB
-endif
-
 ifeq ($(CONFIG_QCA_WIFI_SDIO), 1)
 CDEFINES +=     -DCONFIG_HL_SUPPORT \
                 -DCONFIG_AR6320_SUPPORT \
-- 
2.14.5

