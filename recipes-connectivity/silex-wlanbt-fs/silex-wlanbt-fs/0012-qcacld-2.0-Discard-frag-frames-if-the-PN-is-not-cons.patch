From a8057cff3f9b80a1730c6a528709109e177844c0 Mon Sep 17 00:00:00 2001
Message-Id: <a8057cff3f9b80a1730c6a528709109e177844c0.1711648979.git.keller@fs-net.de>
In-Reply-To: <bb92f3f011b7b125a61ac948b576f518cee03bb3.1711648979.git.keller@fs-net.de>
References: <bb92f3f011b7b125a61ac948b576f518cee03bb3.1711648979.git.keller@fs-net.de>
From: Tiger Yu <tfyu@codeaurora.org>
Date: Fri, 26 Feb 2021 15:39:30 +0800
Subject: [PATCH 12/16] qcacld-2.0: Discard frag frames if the PN is not
 consecutive

Ensure the packet number for fragment is consecutive, and defrag is not
processed if the PN checking failure. All fragments will be
dropped finally when timeout.

Change-Id: I86d2be7d65a27cdae556fba8471c129fb8dc7cfe
CRs-Fixed: 2868016
---
 CORE/CLD_TXRX/TXRX/ol_cfg.c                   | 11 ++++-
 CORE/CLD_TXRX/TXRX/ol_rx_defrag.c             | 69 +++++++++++++++++++++++++--
 CORE/CLD_TXRX/TXRX/ol_rx_defrag.h             |  3 +-
 CORE/CLD_TXRX/TXRX/ol_rx_pn.c                 | 30 +++++++++++-
 CORE/CLD_TXRX/TXRX/ol_rx_pn.h                 | 16 ++++++-
 CORE/CLD_TXRX/TXRX/ol_txrx.c                  | 11 +++--
 CORE/SERVICES/COMMON/ol_cfg.h                 | 31 ++++++++++--
 CORE/SERVICES/COMMON/wlan_tgt_def_config.h    |  2 +-
 CORE/SERVICES/COMMON/wlan_tgt_def_config_hl.h |  4 +-
 9 files changed, 160 insertions(+), 17 deletions(-)

diff --git a/CORE/CLD_TXRX/TXRX/ol_cfg.c b/CORE/CLD_TXRX/TXRX/ol_cfg.c
index 0b07f2c..10875b5 100644
--- a/CORE/CLD_TXRX/TXRX/ol_cfg.c
+++ b/CORE/CLD_TXRX/TXRX/ol_cfg.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011-2014,2016-2017 The Linux Foundation. All rights reserved.
+ * Copyright (c) 2011-2014,2016-2017,2021 The Linux Foundation. All rights reserved.
  *
  * Previously licensed under the ISC license by Qualcomm Atheros, Inc.
  *
@@ -111,6 +111,7 @@ ol_pdev_handle ol_pdev_cfg_attach(adf_os_device_t osdev,
 #else
 	cfg_ctx->defrag_timeout_check = 0;
 #endif
+	cfg_ctx->dup_check = 0;
 	cfg_ctx->max_peer_id = 511;
 	cfg_ctx->max_vdev = CFG_TGT_NUM_VDEV;
 	cfg_ctx->pn_rx_fwd_check = 1;
@@ -386,12 +387,18 @@ int ol_cfg_tx_download_size(ol_pdev_handle pdev)
 	return cfg->tx_download_size;
 }
 
-int ol_cfg_rx_host_defrag_timeout_duplicate_check(ol_pdev_handle pdev)
+int ol_cfg_rx_host_defrag_timeout_check(ol_pdev_handle pdev)
 {
 	struct txrx_pdev_cfg_t *cfg = (struct txrx_pdev_cfg_t *)pdev;
 	return cfg->defrag_timeout_check;
 }
 
+int ol_cfg_rx_host_duplicate_check(ol_pdev_handle pdev)
+{
+	struct txrx_pdev_cfg_t *cfg = (struct txrx_pdev_cfg_t *)pdev;
+	return cfg->dup_check;
+}
+
 int ol_cfg_throttle_period_ms(ol_pdev_handle pdev)
 {
 	struct txrx_pdev_cfg_t *cfg = (struct txrx_pdev_cfg_t *)pdev;
diff --git a/CORE/CLD_TXRX/TXRX/ol_rx_defrag.c b/CORE/CLD_TXRX/TXRX/ol_rx_defrag.c
index 29fc139..e6748c9 100644
--- a/CORE/CLD_TXRX/TXRX/ol_rx_defrag.c
+++ b/CORE/CLD_TXRX/TXRX/ol_rx_defrag.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011-2014, 2016-2018 The Linux Foundation. All rights reserved.
+ * Copyright (c) 2011-2014, 2016-2018,2021 The Linux Foundation. All rights reserved.
  *
  * Previously licensed under the ISC license by Qualcomm Atheros, Inc.
  *
@@ -296,12 +296,17 @@ ol_rx_reorder_store_frag(
     more_frag = mac_hdr->i_fc[1] & IEEE80211_FC1_MORE_FRAG;
 
     if ((!more_frag) && (!fragno) && (!rx_reorder_array_elem->head)) {
-        ol_rx_fraglist_insert(htt_pdev, &rx_reorder_array_elem->head,
+        ol_rx_fraglist_insert(htt_pdev, peer,
+            &rx_reorder_array_elem->head,
             &rx_reorder_array_elem->tail, frag, &all_frag_present);
         adf_nbuf_set_next(frag, NULL);
         ol_rx_defrag(pdev, peer, tid, rx_reorder_array_elem->head);
         rx_reorder_array_elem->head = NULL;
         rx_reorder_array_elem->tail = NULL;
+
+        VOS_TRACE(VOS_MODULE_ID_TXRX, VOS_TRACE_LEVEL_ERROR,
+            "%s: QSV2020008 not expected behavior, but also handled\n",
+            __FUNCTION__);
         return;
     }
     if (rx_reorder_array_elem->head) {
@@ -322,7 +327,8 @@ ol_rx_reorder_store_frag(
         }
     }
 
-    ol_rx_fraglist_insert(htt_pdev, &rx_reorder_array_elem->head,
+    ol_rx_fraglist_insert(htt_pdev, peer,
+        &rx_reorder_array_elem->head,
         &rx_reorder_array_elem->tail, frag, &all_frag_present);
 
     if (pdev->rx.flags.defrag_timeout_check) {
@@ -349,6 +355,7 @@ ol_rx_reorder_store_frag(
 void
 ol_rx_fraglist_insert(
     htt_pdev_handle htt_pdev,
+    struct ol_txrx_peer_t *peer,
     adf_nbuf_t *head_addr,
     adf_nbuf_t *tail_addr,
     adf_nbuf_t frag,
@@ -358,6 +365,10 @@ ol_rx_fraglist_insert(
     struct ieee80211_frame *mac_hdr, *cmac_hdr, *next_hdr, *lmac_hdr;
     u_int8_t fragno, cur_fragno, lfragno, next_fragno;
     u_int8_t last_morefrag = 1, count = 0;
+    int pn_len = 0;
+    void *rx_desc;
+    int index;              /* unicast vs. multicast */
+    union htt_rx_pn_t curr_pn, next_pn;
 
     adf_os_assert(frag);
 
@@ -393,6 +404,10 @@ ol_rx_fraglist_insert(
         if (fragno == cur_fragno) {
             htt_rx_desc_frame_free(htt_pdev, frag);
             *all_frag_present = 0;
+            VOS_TRACE(VOS_MODULE_ID_TXRX, VOS_TRACE_LEVEL_ERROR,
+                   "\n%s:Duplicated frag No, fragno = %u, discard it\n",
+                   __FUNCTION__,
+                   fragno);
             return;
         } else {
             adf_nbuf_set_next(prev, frag);
@@ -404,15 +419,63 @@ ol_rx_fraglist_insert(
                                                                 *tail_addr);
     last_morefrag = lmac_hdr->i_fc[1] & IEEE80211_FC1_MORE_FRAG;
     if (!last_morefrag) {
+        rx_desc = htt_rx_msdu_desc_retrieve(htt_pdev, *head_addr);
+        index = htt_rx_msdu_is_wlan_mcast(htt_pdev, rx_desc) ?
+                txrx_sec_mcast : txrx_sec_ucast;
+        pn_len = htt_pdev->txrx_pdev->rx_pn[peer->security[index].sec_type].len;
+        if (pn_len) {
+            htt_rx_mpdu_desc_pn(htt_pdev, rx_desc, &curr_pn, pn_len);
+        }
+
         do {
             next_hdr = (struct ieee80211_frame *) OL_RX_FRAG_GET_MAC_HDR(
                                                                 htt_pdev, next);
             next_fragno = adf_os_le16_to_cpu(*(u_int16_t *) next_hdr->i_seq) &
                 IEEE80211_SEQ_FRAG_MASK;
+
+			/*
+			 * CR 2868016
+			 * Perform strict PN check if non-consecutive
+			 * discard all frags
+			 */
+			if (pn_len) {
+				/* retrieve PN from rx descriptor */
+			    rx_desc = htt_rx_msdu_desc_retrieve(htt_pdev, next);
+			    htt_rx_mpdu_desc_pn(htt_pdev, rx_desc, &next_pn, pn_len);
+			}
+
             count++;
+			/*
+			 * Fragment number consecutive is gauranteed
+			 * by count++, all_frage_present only set to
+			 * 1 when checking complete, otherwise, frags
+			 * will be discard due to timeout
+			 */
+
             if (next_fragno != count) {
                 break;
             }
+
+			if (pn_len) {
+				if(!ol_rx_pn_strict_chk(&next_pn,
+				    &curr_pn,
+				    index == txrx_sec_ucast,
+				    pn_len,
+				    peer->vdev->opmode)) {
+					VOS_TRACE(VOS_MODULE_ID_TXRX, VOS_TRACE_LEVEL_ERROR,
+                               "\n%s:QSV2020003 expected discard non-strict PN behavior, curr_pn=%llu, next_pn=%llu\n",
+                               __FUNCTION__,
+                               curr_pn.pn48,
+                               next_pn.pn48
+                               );
+					break;
+				}
+
+				vos_mem_copy((uint8_t *) &curr_pn,
+					         (uint8_t *) &next_pn,
+					         sizeof(union htt_rx_pn_t));
+			}
+
             next = adf_nbuf_next(next);
         } while (next);
 
diff --git a/CORE/CLD_TXRX/TXRX/ol_rx_defrag.h b/CORE/CLD_TXRX/TXRX/ol_rx_defrag.h
index 7750f24..b2cc344 100644
--- a/CORE/CLD_TXRX/TXRX/ol_rx_defrag.h
+++ b/CORE/CLD_TXRX/TXRX/ol_rx_defrag.h
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011-2014, 2017 The Linux Foundation. All rights reserved.
+ * Copyright (c) 2011-2014, 2017, 2021 The Linux Foundation. All rights reserved.
  *
  * Previously licensed under the ISC license by Qualcomm Atheros, Inc.
  *
@@ -63,6 +63,7 @@ enum {
 void
 ol_rx_fraglist_insert(
     htt_pdev_handle htt_pdev,
+    struct ol_txrx_peer_t *peer,
     adf_nbuf_t *head_addr,
     adf_nbuf_t *tail_addr,
     adf_nbuf_t frag,
diff --git a/CORE/CLD_TXRX/TXRX/ol_rx_pn.c b/CORE/CLD_TXRX/TXRX/ol_rx_pn.c
index b3f4106..f05696e 100644
--- a/CORE/CLD_TXRX/TXRX/ol_rx_pn.c
+++ b/CORE/CLD_TXRX/TXRX/ol_rx_pn.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011, 2015-2017 The Linux Foundation. All rights reserved.
+ * Copyright (c) 2011, 2015-2017, 2021 The Linux Foundation. All rights reserved.
  *
  * Previously licensed under the ISC license by Qualcomm Atheros, Inc.
  *
@@ -91,6 +91,34 @@ int ol_rx_pn_wapi_cmp(
     return pn_is_replay;
 }
 
+int ol_rx_pn_strict_chk(union htt_rx_pn_t *new_pn,
+		      union htt_rx_pn_t *old_pn,
+		      int is_unicast, int pn_len,
+		      int opmode)
+{
+    int rc = 0;
+
+    if (pn_len == 24) {
+	    rc = ((new_pn->pn24 & 0xffffff) == ((old_pn->pn24 & 0xffffff) + 1));
+	    return rc;
+    }
+
+    /* TKIP: 48-bit TSC, CCMP: 48-bit PN */
+    if (pn_len == 48) {
+	    rc = ((new_pn->pn48 & 0xffffffffffffULL) ==
+		  ((old_pn->pn48 & 0xffffffffffffULL) + 1));
+	    return rc;
+    }
+
+    /* WAPI: 128-bit PN */
+    if (pn_len == 128) {
+        /* TODO WAPI is not implemented, bypass this checking*/
+        rc = 1;
+    }
+
+    return rc;
+}
+
 adf_nbuf_t
 ol_rx_pn_check_base(
     struct ol_txrx_vdev_t *vdev,
diff --git a/CORE/CLD_TXRX/TXRX/ol_rx_pn.h b/CORE/CLD_TXRX/TXRX/ol_rx_pn.h
index 24ba9d0..6cdf7e8 100644
--- a/CORE/CLD_TXRX/TXRX/ol_rx_pn.h
+++ b/CORE/CLD_TXRX/TXRX/ol_rx_pn.h
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 The Linux Foundation. All rights reserved.
+ * Copyright (c) 2011, 2021 The Linux Foundation. All rights reserved.
  *
  * Previously licensed under the ISC license by Qualcomm Atheros, Inc.
  *
@@ -118,5 +118,19 @@ ol_rx_pn_check_base(
     unsigned tid,
     adf_nbuf_t msdu_list);
 
+/**
+ * @brief If applicable, check the Packet Number to strict mathcing old +1 = new.
+ *
+ * @param new_pn - which includes new pn data
+ * @param old_pn - which includes old pn data
+ * @param is_unicast - unicsat frame or mcast frame for WAPI
+ * @param pn_len - pn length
+ * @param op_mode - op mode used for WAPI
+ * @return list of netbufs that didn't fail the PN check
+ */
+int ol_rx_pn_strict_chk(union htt_rx_pn_t *new_pn,
+		      union htt_rx_pn_t *old_pn,
+		      int is_unicast, int pn_len,
+		      int opmode);
 
 #endif /* _OL_RX_PN_H_ */
diff --git a/CORE/CLD_TXRX/TXRX/ol_txrx.c b/CORE/CLD_TXRX/TXRX/ol_txrx.c
index b4e5d71..cd6e08e 100644
--- a/CORE/CLD_TXRX/TXRX/ol_txrx.c
+++ b/CORE/CLD_TXRX/TXRX/ol_txrx.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011-2019 The Linux Foundation. All rights reserved.
+ * Copyright (c) 2011-2019, 2021 The Linux Foundation. All rights reserved.
  *
  * Previously licensed under the ISC license by Qualcomm Atheros, Inc.
  *
@@ -565,8 +565,13 @@ ol_txrx_pdev_attach(
 
     /* configure where defrag timeout and duplicate detection is handled */
     pdev->rx.flags.defrag_timeout_check =
-        pdev->rx.flags.dup_check =
-            ol_cfg_rx_host_defrag_timeout_duplicate_check(ctrl_pdev);
+            ol_cfg_rx_host_defrag_timeout_check(ctrl_pdev);
+    pdev->rx.flags.dup_check =
+            ol_cfg_rx_host_duplicate_check(ctrl_pdev);
+
+    if (pdev->rx.flags.defrag_timeout_check) {
+        pdev->rx.defrag.timeout_ms = DEFRAG_MIN_TIMEOUT_MS;
+    }
 
 #ifdef QCA_SUPPORT_SW_TXRX_ENCAP
     /* Need to revisit this part. Currently,hardcode to riva's caps */
diff --git a/CORE/SERVICES/COMMON/ol_cfg.h b/CORE/SERVICES/COMMON/ol_cfg.h
index 494b4d9..ecb7df1 100644
--- a/CORE/SERVICES/COMMON/ol_cfg.h
+++ b/CORE/SERVICES/COMMON/ol_cfg.h
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011-2014, 2016-2017 The Linux Foundation. All rights reserved.
+ * Copyright (c) 2011-2014, 2016-2017, 2021 The Linux Foundation. All rights reserved.
  *
  * Previously licensed under the ISC license by Qualcomm Atheros, Inc.
  *
@@ -51,6 +51,12 @@ enum wlan_frm_fmt {
     wlan_frm_fmt_802_3,
 };
 
+#if CFG_TGT_DEFAULT_RX_SKIP_DEFRAG_TIMEOUT_DUP_DETECTION_CHECK
+#define DEFRAG_MIN_TIMEOUT_MS 100
+#else
+#define DEFRAG_MIN_TIMEOUT_MS 0
+#endif
+
 /* Throttle period Different level Duty Cycle values*/
 #define THROTTLE_DUTY_CYCLE_LEVEL0 (0)
 #define THROTTLE_DUTY_CYCLE_LEVEL1 (50)
@@ -71,6 +77,7 @@ struct wlan_ipa_uc_rsc_t {
 struct txrx_pdev_cfg_t {
 	u8 is_high_latency;
 	u8 defrag_timeout_check;
+    u8 dup_check;
 	u8 rx_pn_check;
 	u8 pn_rx_fwd_check;
 	u8 host_addba;
@@ -341,7 +348,25 @@ u_int16_t ol_cfg_target_tx_credit(ol_pdev_handle pdev);
 int ol_cfg_tx_download_size(ol_pdev_handle pdev);
 
 /**
- * brief Specify where defrag timeout and duplicate detection is handled
+ * brief Specify where defrag timeout is handled
+ * @details
+ *   non-aggregate duplicate detection and timing out stale fragments
+ *   requires additional target memory. To reach max client
+ *   configurations (128+), non-aggregate duplicate detection and the
+ *   logic to time out stale fragments is moved to the host.
+ *
+ * @param pdev - handle to the physical device
+ * @return
+ *  0 -> target is responsible non-aggregate duplicate detection and
+ *          timing out stale fragments.
+ *
+ *  1 -> host is responsible non-aggregate duplicate detection and
+ *          timing out stale fragments.
+ */
+int ol_cfg_rx_host_defrag_timeout_check(ol_pdev_handle pdev);
+
+/**
+ * brief Specify where duplicate detection is handled
  * @details
  *   non-aggregate duplicate detection and timing out stale fragments
  *   requires additional target memory. To reach max client
@@ -356,7 +381,7 @@ int ol_cfg_tx_download_size(ol_pdev_handle pdev);
  *  1 -> host is responsible non-aggregate duplicate detection and
  *          timing out stale fragments.
  */
-int ol_cfg_rx_host_defrag_timeout_duplicate_check(ol_pdev_handle pdev);
+int ol_cfg_rx_host_duplicate_check(ol_pdev_handle pdev);
 
 /**
  * brief Query for the period in ms used for throttling for
diff --git a/CORE/SERVICES/COMMON/wlan_tgt_def_config.h b/CORE/SERVICES/COMMON/wlan_tgt_def_config.h
index 9f247cf..98c6e9a 100644
--- a/CORE/SERVICES/COMMON/wlan_tgt_def_config.h
+++ b/CORE/SERVICES/COMMON/wlan_tgt_def_config.h
@@ -172,7 +172,7 @@
 #define CFG_TGT_DEFAULT_TX_DBG_LOG_SIZE 1024 /* bytes */
 
 /* target based fragment timeout and MPDU duplicate detection */
-#define CFG_TGT_DEFAULT_RX_SKIP_DEFRAG_TIMEOUT_DUP_DETECTION_CHECK 0
+#define CFG_TGT_DEFAULT_RX_SKIP_DEFRAG_TIMEOUT_DUP_DETECTION_CHECK 1
 
 /*  Default VoW configuration
  */
diff --git a/CORE/SERVICES/COMMON/wlan_tgt_def_config_hl.h b/CORE/SERVICES/COMMON/wlan_tgt_def_config_hl.h
index 74875c1..fe29b23 100644
--- a/CORE/SERVICES/COMMON/wlan_tgt_def_config_hl.h
+++ b/CORE/SERVICES/COMMON/wlan_tgt_def_config_hl.h
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2013-2016, 2019 The Linux Foundation. All rights reserved.
+ * Copyright (c) 2013-2016, 2019, 2021 The Linux Foundation. All rights reserved.
  *
  * Previously licensed under the ISC license by Qualcomm Atheros, Inc.
  *
@@ -209,7 +209,7 @@
 #define CFG_TGT_DEFAULT_TX_DBG_LOG_SIZE 1024 /* bytes */
 
 /* target based fragment timeout and MPDU duplicate detection */
-#define CFG_TGT_DEFAULT_RX_SKIP_DEFRAG_TIMEOUT_DUP_DETECTION_CHECK 0
+#define CFG_TGT_DEFAULT_RX_SKIP_DEFRAG_TIMEOUT_DUP_DETECTION_CHECK 1
 /*  Default VoW configuration
  */
 #define CFG_TGT_DEFAULT_VOW_CONFIG   0
-- 
2.14.5

